import java
import semmle.code.java.dataflow.DataFlow
private import semmle.code.java.dataflow.ExternalFlow

predicate isGPTDetectedSource(DataFlow::Node src) {
    (
        src.asExpr().(Call).getCallee().getName() = "getMessage" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Throwable")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getParameterMap" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "group" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util.regex", "Matcher")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "get" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Map")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeader" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPathInfo" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getServletPath" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getRequestURL" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getInputStream" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getParameter" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getParameterValues" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getQueryString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getAttribute" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getRequestURI" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "StringBuilder")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getAttribute" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.eclipse.jetty.server.handler", "Context")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getInitParameter" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "FilterConfig")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "forName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Class")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getOrDefault" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Map")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeaders" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet.http", "HttpServletRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getFile" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URL")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URL")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Throwable")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getProperty" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "System")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "get" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Map")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getAttribute" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.servlet", "ServletContext")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getTemplate" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("freemarker.template", "Configuration")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.apache.http", "Header")
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "params" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "param" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "cookie" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "headers" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "header" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryMap" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "key" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryParams" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "queryParam" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryParamsValues" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "queryParam" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryParamOrDefault" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Request") and
        ( p.getName() = "queryParam" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "delete" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Redirect") and
        ( p.getName() = "fromPath"  or  p.getName() = "toPath" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "any" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Redirect") and
        ( p.getName() = "fromPath"  or  p.getName() = "toPath" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "post" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Redirect") and
        ( p.getName() = "fromPath"  or  p.getName() = "toPath" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "get" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Routable") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "get" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path"  or  p.getName() = "acceptType" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "delete" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "after" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "before" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "path" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "post" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "patch" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "webSocket" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("spark", "Spark") and
        ( p.getName() = "path" )
    )
}


