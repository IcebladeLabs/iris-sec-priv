A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.util,HashSet,HashSet<Class<?>>,HashSet<Class<?>>(int p0)
java.util,HashSet,HashSet<String>,HashSet<String>()
java.util,HashSet,HashSet<String>,HashSet<String>(Collection<? extends String> p0)
java.util,Iterator,hasNext,boolean hasNext()
java.util,Iterator,next,Object next()
java.util,Map,clear,void clear()
java.util,Map,containsKey,boolean containsKey(Object p0)
java.util,Map,entrySet,Set<Entry<Class<?>,Class<?>>> entrySet()
java.util,Map,entrySet,Set<Entry<String,QueryParamsMap>> entrySet()
java.util,Map,entrySet,Set<Entry<String,String>> entrySet()
java.util,Map,entrySet,Set<Entry<String,String[]>> entrySet()
java.util,Map,forEach,void forEach(BiConsumer<? super String,? super String> p0)
java.util,Map,get,Book get(Object p0)
java.util,Map,get,Class<?> get(Object p0)
java.util,Map,get,ConnectionFactory get(Object p0)
java.util,Map,get,EmbeddedServerFactory get(Object p0)
java.util,Map,get,ExceptionHandlerImpl<> get(Object p0)
java.util,Map,get,List<String> get(Object p0)
java.util,Map,get,QueryParamsMap get(Object p0)
java.util,Map,get,RouteEntry get(Object p0)
java.util,Map,get,String get(Object p0)
java.util,Map,get,String[] get(Object p0)
java.util,Map,get,WebSocketHandlerWrapper get(Object p0)
java.util,Map,getOrDefault,String getOrDefault(Object p0, String p1)
java.util,Map,isEmpty,boolean isEmpty()
java.util,Map,keySet,Set<String> keySet()
java.util,Map,put,Book put(String p0, Book p1)
java.util,Map,put,Class<?> put(Class<?> p0, Class<?> p1)
java.util,Map,put,Class<?> put(String p0, Class<?> p1)
java.util,Map,put,EmbeddedServerFactory put(Object p0, EmbeddedServerFactory p1)

