A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
com.google.gson,Gson,Gson,Gson()
com.google.gson,Gson,toJson,String toJson(Object p0)
freemarker.template,Configuration,Configuration,Configuration(Version p0)
freemarker.template,Configuration,getTemplate,Template getTemplate(String p0)
freemarker.template,Configuration,setClassForTemplateLoading,void setClassForTemplateLoading(Class<> p0, String p1)
freemarker.template,Template,process,void process(Object p0, Writer p1)
java.io,ByteArrayInputStream,ByteArrayInputStream,ByteArrayInputStream(byte[] p0)
java.io,ByteArrayInputStream,available,int available()
java.io,ByteArrayInputStream,read,int read()
java.io,ByteArrayOutputStream,ByteArrayOutputStream,ByteArrayOutputStream()
java.io,ByteArrayOutputStream,toByteArray,byte[] toByteArray()
java.io,ByteArrayOutputStream,write,void write(byte[] p0, int p1, int p2)
java.io,File,File,File(File p0, String p1)
java.io,File,File,File(String p0)
java.io,File,File,File(String p0, String p1)
java.io,File,canRead,boolean canRead()
java.io,File,createNewFile,boolean createNewFile()
java.io,File,delete,boolean delete()
java.io,File,exists,boolean exists()
java.io,File,getAbsolutePath,String getAbsolutePath()
java.io,File,getName,String getName()
java.io,File,getPath,String getPath()
java.io,File,isDirectory,boolean isDirectory()
java.io,File,lastModified,long lastModified()
java.io,File,length,long length()
java.io,File,mkdirs,boolean mkdirs()
java.io,File,toURI,URI toURI()
java.io,FileInputStream,FileInputStream,FileInputStream(File p0)
java.io,FileInputStream,FileInputStream,FileInputStream(String p0)
java.io,FileInputStream,close,void close()

