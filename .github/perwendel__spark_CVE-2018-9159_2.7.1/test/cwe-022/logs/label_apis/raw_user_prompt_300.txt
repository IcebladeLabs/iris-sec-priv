A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.util,Map,put,ExceptionHandlerImpl<> put(Class<? extends Exception> p0, ExceptionHandlerImpl<> p1)
java.util,Map,put,Object put(String p0, Object p1)
java.util,Map,put,QueryParamsMap put(String p0, QueryParamsMap p1)
java.util,Map,put,RouteEntry put(String p0, RouteEntry p1)
java.util,Map,put,String put(String p0, String p1)
java.util,Map,put,String[] put(String p0, String[] p1)
java.util,Map,put,WebSocketHandlerWrapper put(String p0, WebSocketHandlerWrapper p1)
java.util,Map,putAll,void putAll(Map<? extends String,? extends String> p0)
java.util,Map,remove,Book remove(Object p0)
java.util,Map,size,int size()
java.util,Map,values,Collection<Class<?>> values()
java.util,Objects,requireNonNull,T requireNonNull(T p0, String p1)
java.util,Optional,empty,Optional<T> empty()
java.util,Optional,get,Integer get()
java.util,Optional,isPresent,boolean isPresent()
java.util,Optional,of,Optional<T> of(T p0)
java.util,Optional,ofNullable,Optional<T> ofNullable(T p0)
java.util,Optional,orElse,String orElse(String p0)
java.util,Random,Random,Random()
java.util,Random,nextInt,int nextInt(int p0)
java.util,Set,add,boolean add(Class<?> p0)
java.util,Set,add,boolean add(String p0)
java.util,Set,addAll,boolean addAll(Collection<? extends Class<?>> p0)
java.util,Set,toArray,Object[] toArray()
java.util,TreeSet,TreeSet<String>,TreeSet<String>()
java.util,TreeSet,add,boolean add(String p0)
java.util.concurrent,CountDownLatch,CountDownLatch,CountDownLatch(int p0)
java.util.concurrent,CountDownLatch,await,boolean await(long p0, TimeUnit p1)
java.util.concurrent,CountDownLatch,await,void await()
java.util.concurrent,CountDownLatch,countDown,void countDown()

