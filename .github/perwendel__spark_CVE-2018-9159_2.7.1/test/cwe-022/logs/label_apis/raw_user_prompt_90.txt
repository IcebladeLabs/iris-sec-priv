A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.lang,Float,compare,int compare(float p0, float p1)
java.lang,Float,parseFloat,float parseFloat(String p0)
java.lang,Float,valueOf,Float valueOf(String p0)
java.lang,IllegalArgumentException,IllegalArgumentException,IllegalArgumentException()
java.lang,IllegalArgumentException,IllegalArgumentException,IllegalArgumentException(String p0)
java.lang,IllegalArgumentException,IllegalArgumentException,IllegalArgumentException(Throwable p0)
java.lang,IllegalStateException,IllegalStateException,IllegalStateException(String p0)
java.lang,Integer,Integer,Integer(int p0)
java.lang,Integer,longValue,long longValue()
java.lang,Integer,valueOf,Integer valueOf(String p0)
java.lang,Long,Long,Long(long p0)
java.lang,Long,valueOf,Long valueOf(String p0)
java.lang,NumberFormatException,NumberFormatException,NumberFormatException(String p0)
java.lang,RuntimeException,RuntimeException,RuntimeException()
java.lang,RuntimeException,RuntimeException,RuntimeException(String p0)
java.lang,RuntimeException,RuntimeException,RuntimeException(String p0, Throwable p1)
java.lang,RuntimeException,RuntimeException,RuntimeException(Throwable p0)
java.lang,String,String,String(byte[] p0)
java.lang,String,String,String(byte[] p0, String p1)
java.lang,String,charAt,char charAt(int p0)
java.lang,String,contains,boolean contains(CharSequence p0)
java.lang,String,endsWith,boolean endsWith(String p0)
java.lang,String,equals,boolean equals(Object p0)
java.lang,String,equalsIgnoreCase,boolean equalsIgnoreCase(String p0)
java.lang,String,format,String format(String p0, Object[] p1)
java.lang,String,getBytes,byte[] getBytes()
java.lang,String,getBytes,byte[] getBytes(String p0)
java.lang,String,hashCode,int hashCode()
java.lang,String,indexOf,int indexOf(String p0)
java.lang,String,indexOf,int indexOf(String p0, int p1)

