name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  verify-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Build image
        run: docker build -f Dockerfile --platform linux/x86_64 -t iris:latest .

      - name: Run image
        run: docker run --platform=linux/amd64 iris:latest

  get-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.read-csv.outputs.projects }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read projects and parameters from CSV
        id: read-csv
        run: |
          CSV_FILE=".github/workflows/to_build.csv"

          PROJECTS_JSON=$(cat "$CSV_FILE" | grep -v '^#' | sed '/^\s*$/d' | while IFS=, read -r slug java_v maven_v gradle_v cwe_v; do
            jq -n --arg slug "$slug" \
                  --arg java_v "$java_v" \
                  --arg maven_v "$maven_v" \
                  --arg gradle_v "$gradle_v" \
                  --arg cwe_v "$cwe_v" \
                  '{project_slug: $slug, java_version: $java_v, maven_version: $maven_v, gradle_version: $gradle_v, cwe: $cwe_v}'
          done | jq -s .)
          echo "projects=$PROJECTS_JSON" >> $GITHUB_OUTPUT

          
  build-and-analyze:
    needs: get-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.get-projects.outputs.projects) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          auto-activate-base: false
          activate-environment: iris
          auto-update-conda: true

      - name: Set up Java ${{ matrix.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java_version }}
          cache: 'maven'

      - name: Install Maven ${{ matrix.maven_version }}
        if: ${{ matrix.maven_version != '' }}
        run: |
          MAVEN_VERSION="${{ matrix.maven_version }}"
          MAVEN_TAR="apache-maven-${MAVEN_VERSION}-bin.tar.gz"
          MAVEN_URL="https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/${MAVEN_TAR}"
          MAVEN_INSTALL_DIR="/opt/maven/apache-maven-${MAVEN_VERSION}"

          echo "Downloading Maven ${MAVEN_VERSION}..."
          sudo curl -fSL "$MAVEN_URL" -o "/tmp/${MAVEN_TAR}" || { echo "Failed to download Maven!"; exit 1; }

          echo "Creating Maven install directory: ${MAVEN_INSTALL_DIR}"
          sudo mkdir -p "${MAVEN_INSTALL_DIR}"

          echo "Extracting Maven to ${MAVEN_INSTALL_DIR}..."
          sudo tar -xzf "/tmp/${MAVEN_TAR}" -C "/opt/maven/" || { echo "Failed to extract Maven!"; exit 1; }

          echo "Setting MAVEN_HOME and adding to PATH..."
          echo "MAVEN_HOME=${MAVEN_INSTALL_DIR}" >> $GITHUB_ENV
          echo "M2_HOME=${MAVEN_INSTALL_DIR}" >> $GITHUB_ENV
          echo "${MAVEN_INSTALL_DIR}/bin" >> $GITHUB_PATH

          echo "Maven ${MAVEN_VERSION} installed to ${MAVEN_INSTALL_DIR}"
          echo "------------------------------------------------"

      - name: Install Gradle ${{ matrix.gradle_version }}
        if: ${{ matrix.gradle_version != '' }}
        run: |
          GRADLE_VERSION="${{ matrix.gradle_version }}"
          GRADLE_ZIP="gradle-${GRADLE_VERSION}-bin.zip"
          GRADLE_URL="https://services.gradle.org/distributions/${GRADLE_ZIP}"
          GRADLE_INSTALL_DIR="/opt/gradle/gradle-${GRADLE_VERSION}"

          echo "Downloading Gradle ${GRADLE_VERSION}..."
          sudo curl -fSL "$GRADLE_URL" -o "/tmp/${GRADLE_ZIP}" || { echo "Failed to download Gradle!"; exit 1; }

          echo "Creating Gradle install directory: ${GRADLE_INSTALL_DIR}"
          sudo mkdir -p "${GRADLE_INSTALL_DIR}"

          echo "Extracting Gradle to ${GRADLE_INSTALL_DIR}..."
          sudo unzip -q "/tmp/${GRADLE_ZIP}" -d "/opt/gradle/" || { echo "Failed to extract Gradle!"; exit 1; }

          echo "Setting GRADLE_HOME and adding to PATH..."
          echo "GRADLE_HOME=${GRADLE_INSTALL_DIR}" >> $GITHUB_ENV
          echo "${GRADLE_INSTALL_DIR}/bin" >> $GITHUB_PATH

          echo "Gradle ${GRADLE_VERSION} installed to ${GRADLE_INSTALL_DIR}"
          echo "------------------------------------------------"
          
      - name: Download and Extract CodeQL Bundle
        run: |
          # Download the CodeQL bundle
          curl -L https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.15.0/codeql-bundle-linux64.tar.gz -o codeql-bundle.tar.gz || exit 1

          # Extract the bundle
          tar -xzf codeql-bundle.tar.gz || exit 1

          # Store the absolute path to the extracted CodeQL directory in GITHUB_ENV.
          echo "CODEQL_PATH=$(pwd)/codeql" >> $GITHUB_ENV

          # Add the CodeQL executable's directory to the PATH for all subsequent steps.
          echo "$(pwd)/codeql" >> $GITHUB_PATH

      - name: Update CodeQL Query version in config
        run: sed -i "s/^CODEQL_QUERY_VERSION = \".*\"$/CODEQL_QUERY_VERSION = \"0.8.0\"/" src/config.py

      - name: Update JDK Path in dep_configs.json for ${{ matrix.java_version }}
        run: |
          # Install moreutils for sponge
          sudo apt-get update && sudo apt-get install -y moreutils
          
          # Get the JAVA_HOME path from the output of the setup-java step for the current matrix version
          CURRENT_JAVA_HOME="${{ steps.setup-java-matrix.outputs.java-home }}"
          CURRENT_JAVA_VERSION="${{ matrix.java_version }}"

          echo "JDK ${CURRENT_JAVA_VERSION} Home: $CURRENT_JAVA_HOME"

          # Use jq to update only the specific JDK version's path in dep_configs.json
          jq \
            --arg current_java_version "$CURRENT_JAVA_VERSION" \
            --arg current_java_home "$CURRENT_JAVA_HOME" \
            '.jdks[$current_java_version] = $current_java_home' \
            "dep_configs.json" | sponge "dep_configs.json"
            
      - name: Relocate cached output for ${{ matrix.project_slug }}
        run: |
          mv .github/cached_output/common output/
          mv .github/cached_output/${{ matrix.project_slug }} output/

      - name: Build project ${{ matrix.project_slug }}
        run: |
          echo "--- Building ${{ matrix.project_slug }} ---"
          python scripts/setup.py --filter ${{ matrix.project_slug }}
          echo "--------------------------------"

      - name: Generate CodeQL database for ${{ matrix.project_slug }}
        run: |
          echo "--- Generating CodeQL database for ${{ matrix.project_slug }} ---"
          python scripts/build_codeql_dbs.py --project ${{ matrix.project_slug }}
          echo "----------------------------------"

      - name: Run IRIS for ${{ matrix.project_slug }} with CWE ${{ matrix.cwe }}
        run: |
          echo "--- Running IRIS for ${{ matrix.project_slug }} ---"
          conda run -n iris python src/neusym_vul.py --query ${{ matrix.cwe }} --run-id test --overwrite-api-candidates --overwrite-func-param-candidates --skip-posthoc-filter ${{ matrix.project_slug }}
          echo "--------------------"

      - name: Verify output file existence
        run: |
          SARIF_FILE="${{ matrix.project_slug }}/test/${{ matrix.cwe }}/results.sarif"
          echo "Checking for .sarif file: $SARIF_FILE"
          if [ -f "$SARIF_FILE" ]; then
            echo ".sarif file found: $SARIF_FILE"
          else
            echo "Error: .sarif file not found at $SARIF_FILE"
            exit 1
          fi
