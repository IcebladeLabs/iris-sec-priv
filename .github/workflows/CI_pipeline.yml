name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  verify-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Build image
        run: docker build -f Dockerfile --platform linux/x86_64 -t iris:latest .

      - name: Run image
        run: docker run --platform=linux/amd64 iris:latest
        
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          auto-activate-base: false
          activate-environment: iris
          auto-update-conda: true

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      - name: Install Maven 3.5.0
        run: |
          MAVEN_VERSION="3.5.0"
          MAVEN_TAR="apache-maven-${MAVEN_VERSION}-bin.tar.gz"
          MAVEN_URL="https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/${MAVEN_TAR}"
          MAVEN_INSTALL_DIR="/opt/maven/apache-maven-${MAVEN_VERSION}"

          echo "Downloading Maven ${MAVEN_VERSION}..."
          sudo curl -fSL "$MAVEN_URL" -o "/tmp/${MAVEN_TAR}" || { echo "Failed to download Maven!"; exit 1; }
          
          echo "Creating Maven install directory: ${MAVEN_INSTALL_DIR}"
          sudo mkdir -p "${MAVEN_INSTALL_DIR}"
          
          echo "Extracting Maven to ${MAVEN_INSTALL_DIR}..."
          sudo tar -xzf "/tmp/${MAVEN_TAR}" -C "/opt/maven/" || { echo "Failed to extract Maven!"; exit 1; }
          
          echo "Setting MAVEN_HOME and adding to PATH..."
          # Set MAVEN_HOME for subsequent steps
          echo "M2_HOME=${MAVEN_INSTALL_DIR}" >> $GITHUB_ENV
          echo "${MAVEN_INSTALL_DIR}/bin" >> $GITHUB_PATH
          
          echo "Maven 3.5.0 installed to ${MAVEN_INSTALL_DIR}"
          echo "------------------------------------------------"

      - name: Download and Extract CodeQL Bundle
        run: |
          # Download the CodeQL bundle
          curl -L https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.15.0/codeql-bundle-linux64.tar.gz -o codeql-bundle.tar.gz || exit 1

          # Extract the bundle
          tar -xzf codeql-bundle.tar.gz || exit 1

          # Store the absolute path to the extracted CodeQL directory in GITHUB_ENV.
          echo "CODEQL_PATH=$(pwd)/codeql" >> $GITHUB_ENV

          # Add the CodeQL executable's directory to the PATH for all subsequent steps.
          echo "$(pwd)/codeql" >> $GITHUB_PATH

      - name: Update CodeQL Query version in config
        run: sed -i "s/^CODEQL_QUERY_VERSION = \".*\"$/CODEQL_QUERY_VERSION = \"0.8.0\"/" src/config.py

      - name: Relocate cached output
        run: |
          mv .github/cached_output/common output/
          mv .github/cached_output/perwendel__spark_CVE-2018-9159_2.7.1 output/
          
      - name: Build perwendel-spark
        run: |
          echo "--- Building perwendel-spark ---"
          python scripts/setup.py --filter perwendel__spark_CVE-2018-9159_2.7.1
          echo "--------------------------------"

      - name: Generate CodeQL database
        run: |
          echo "--- Generating CodeQL database ---"
          python scripts/build_codeql_dbs.py --project perwendel__spark_CVE-2018-9159_2.7.1
          echo "----------------------------------"

      - name: Run IRIS
        run: |
          echo "--- Running IRIS ---"
          conda run -n iris python src/neusym_vul.py --query cwe-022wLLM --run-id test --overwrite-api-candidates --overwrite-func-param-candidates --skip-posthoc-filter perwendel__spark_CVE-2018-9159_2.7.1
          echo "--------------------"
