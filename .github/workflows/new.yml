name: iris-sec CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          auto-activate-base: false
          activate-environment: iris
          auto-update-conda: true
          # --- FIX for PackagesNotFoundError ---
          # 1. Update your environment.yml to specify a precise Python version.
          #    Example (in environment.yml):
          #    dependencies:
          #      - python=3.9 # Or 3.10, 3.11 - choose a precise, common, and available version
          #      - pip
          #      # ... other dependencies
          #    channels:
          #      - conda-forge # IMPORTANT: Ensure this is present and high in the list
          #      - defaults
          # 2. If you cannot modify environment.yml easily, you can try passing it here:
          # python-version: 3.9 # Uncomment and set a precise, common Python version
          # channels: 'conda-forge,defaults' # Uncomment if not in env.yml or to prioritize
          # ---------------------------------------------

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or 'zulu', 'corretto', etc.
          java-version: '8' # This will typically install 8.0.x
          cache: 'maven' # Caches Maven dependencies

      - name: Manually Install Maven 3.5.0
        run: |
          MAVEN_VERSION="3.5.0"
          MAVEN_TAR="apache-maven-${MAVEN_VERSION}-bin.tar.gz"
          MAVEN_URL="https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/${MAVEN_TAR}"
          MAVEN_INSTALL_DIR="/opt/maven/apache-maven-${MAVEN_VERSION}"

          echo "Downloading Maven ${MAVEN_VERSION}..."
          sudo curl -fSL "$MAVEN_URL" -o "/tmp/${MAVEN_TAR}" || { echo "Failed to download Maven!"; exit 1; }
          
          echo "Creating Maven install directory: ${MAVEN_INSTALL_DIR}"
          sudo mkdir -p "${MAVEN_INSTALL_DIR}"
          
          echo "Extracting Maven to ${MAVEN_INSTALL_DIR}..."
          sudo tar -xzf "/tmp/${MAVEN_TAR}" -C "/opt/maven/" || { echo "Failed to extract Maven!"; exit 1; }
          
          echo "Setting MAVEN_HOME and adding to PATH..."
          # Set MAVEN_HOME for subsequent steps
          echo "M2_HOME=${MAVEN_INSTALL_DIR}" >> $GITHUB_ENV
          echo "${MAVEN_INSTALL_DIR}/bin" >> $GITHUB_PATH
          
          echo "Maven 3.5.0 installed to ${MAVEN_INSTALL_DIR}"
          echo "------------------------------------------------"

      - name: Download and Extract CodeQL Bundle
        run: |
          # Download the CodeQL bundle
          curl -L https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.15.0/codeql-bundle-linux64.tar.gz -o codeql-bundle.tar.gz || exit 1

          # Extract the bundle (it usually extracts into a directory named 'codeql')
          tar -xzf codeql-bundle.tar.gz || exit 1

          # Store the absolute path to the extracted CodeQL directory in GITHUB_ENV.
          echo "CODEQL_PATH=$(pwd)/codeql" >> $GITHUB_ENV

          # Add the CodeQL executable's directory to the PATH for all subsequent steps.
          echo "$(pwd)/codeql" >> $GITHUB_PATH

          # Optional: VERIFY CodeQL bundle contents within THIS step (no 'codeql' command test here)
          echo "--- CodeQL Bundle Preparation (within current step) ---"
          ls -F # See the 'codeql/' directory
          echo "PATH for this step (not yet updated by GITHUB_PATH for 'codeql' command): $PATH"
          echo "-----------------------------------------------------"

      - name: Verify Environment Persistence (Java, Maven, CodeQL)
        # This NEW step will verify that the PATH and environment variables
        # set in previous steps are now correctly persisted.
        run: |
          echo "--- Verifying Environment Persistence (New Step) ---"
          echo "JAVA_HOME (persisted): $JAVA_HOME"
          echo "MAVEN_HOME (persisted): $MAVEN_HOME"
          echo "CODEQL_PATH (persisted): ${{ env.CODEQL_PATH }}"
          echo "Full PATH (persisted): $PATH"

          # Now, test the commands that rely on the persisted PATH. These should work.
          java -version || { echo "ERROR: Java command not found or not working after persistence."; exit 1; }
          mvn -version  || { echo "ERROR: Maven command not found or not working after persistence."; exit 1; }
          codeql --version || { echo "ERROR: CodeQL command not found or not working after persistence."; exit 1; }
          echo "----------------------------------------------------"

      - name: Update CodeQL Query version in config
        run: sed -i "s/^CODEQL_QUERY_VERSION = \".*\"$/CODEQL_QUERY_VERSION = \"0.8.0\"/" src/config.py

      - name: Verify CodeQL Executable Permissions
        run: |
          CODEQL_INSTALL_DIR="${{ env.CODEQL_PATH }}" # Use the env var we set
          echo "Checking permissions for $CODEQL_INSTALL_DIR/codeql"
          ls -l "$CODEQL_INSTALL_DIR/codeql"
          # Expected output should show 'x' (execute) permissions, e.g., -rwxr-xr-x
          if [ ! -x "$CODEQL_INSTALL_DIR/codeql" ]; then
            echo "ERROR: CodeQL executable does not have execute permissions!"
            echo "Attempting to add execute permissions..."
            chmod +x "$CODEQL_INSTALL_DIR/codeql"
            ls -l "$CODEQL_INSTALL_DIR/codeql" # Verify after chmod
          fi
          echo "------------------------------------------"
          
      - name: Build perwendel-spark
        run: |
          echo "--- Building perwendel-spark ---"
          # These echoes should now show values correctly persisted from SDKMAN step
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "MAVEN_HOME is: $MAVEN_HOME"
          python scripts/setup.py --filter perwendel__spark_CVE-2018-9159_2.7.1
          echo "--------------------------------"

      - name: Generate CodeQL database
        run: |
          echo "--- Generating CodeQL database ---"
          # 'codeql' command should be found here due to the $GITHUB_PATH update
          codeql --version # Re-verify codeql is found just before its use
          python scripts/build_codeql_dbs.py --project perwendel__spark_CVE-2018-9159_2.7.1
          echo "----------------------------------"

      - name: Run IRIS
        run: |
          echo "--- Running IRIS ---"
          python src/neusym_vul.py --query cwe-022wLLM --run-id test --llm qwen2.5-coder-7b perwendel__spark_CVE-2018-9159_2.7.1
          echo "--------------------"
