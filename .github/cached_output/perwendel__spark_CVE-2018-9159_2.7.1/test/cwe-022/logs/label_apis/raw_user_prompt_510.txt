A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
org.eclipse.jetty.util.thread,QueuedThreadPool,QueuedThreadPool,QueuedThreadPool(int p0)
org.eclipse.jetty.util.thread,QueuedThreadPool,QueuedThreadPool,QueuedThreadPool(int p0, int p1, int p2)
org.eclipse.jetty.util.thread,ThreadPool,getIdleThreads,int getIdleThreads()
org.eclipse.jetty.util.thread,ThreadPool,getThreads,int getThreads()
org.eclipse.jetty.webapp,WebAppContext,WebAppContext,WebAppContext()
org.eclipse.jetty.webapp,WebAppContext,setServer,void setServer(Server p0)
org.eclipse.jetty.webapp,WebAppContext,setWar,void setWar(String p0)
org.eclipse.jetty.websocket.api,RemoteEndpoint,sendString,void sendString(String p0)
org.eclipse.jetty.websocket.api,Session,close,void close(int p0, String p1)
org.eclipse.jetty.websocket.api,Session,getRemote,RemoteEndpoint getRemote()
org.eclipse.jetty.websocket.api,WebSocketAdapter,WebSocketAdapter,WebSocketAdapter()
org.eclipse.jetty.websocket.api,WebSocketPolicy,getIdleTimeout,long getIdleTimeout()
org.eclipse.jetty.websocket.api,WebSocketPolicy,setIdleTimeout,void setIdleTimeout(long p0)
org.eclipse.jetty.websocket.client,ClientUpgradeRequest,ClientUpgradeRequest,ClientUpgradeRequest()
org.eclipse.jetty.websocket.client,WebSocketClient,WebSocketClient,WebSocketClient()
org.eclipse.jetty.websocket.client,WebSocketClient,connect,Future<Session> connect(Object p0, URI p1, ClientUpgradeRequest p2)
org.eclipse.jetty.websocket.server,NativeWebSocketConfiguration,addMapping,void addMapping(PathSpec p0, WebSocketCreator p1)
org.eclipse.jetty.websocket.server,NativeWebSocketConfiguration,getFactory,WebSocketServerFactory getFactory()
org.eclipse.jetty.websocket.server,NativeWebSocketConfiguration,getMatch,MappedResource<WebSocketCreator> getMatch(String p0)
org.eclipse.jetty.websocket.server,WebSocketServerFactory,getPolicy,WebSocketPolicy getPolicy()
org.eclipse.jetty.websocket.server,WebSocketUpgradeFilter,configureContext,WebSocketUpgradeFilter configureContext(ServletContextHandler p0)
org.eclipse.jetty.websocket.server,WebSocketUpgradeFilter,getFactory,WebSocketServletFactory getFactory()
org.eclipse.jetty.websocket.servlet,WebSocketServletFactory,getPolicy,WebSocketPolicy getPolicy()
org.powermock.api.mockito,PowerMockito,whenNew,ConstructorExpectationSetup<T> whenNew(Class<T> p0)
org.powermock.api.mockito.expectation,WithAnyArguments,withAnyArguments,OngoingStubbing<ServletContextHandler> withAnyArguments()
org.powermock.reflect,Whitebox,getInternalState,T getInternalState(Object p0, String p1)
org.powermock.reflect,Whitebox,setInternalState,void setInternalState(Object p0, String p1, Object p2)
org.slf4j,Logger,debug,void debug(String p0)
org.slf4j,Logger,debug,void debug(String p0, Object p1, Object p2)
org.slf4j,Logger,debug,void debug(String p0, Object[] p1)

