A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.io,FileNotFoundException,FileNotFoundException,FileNotFoundException(String p0)
java.io,FileWriter,FileWriter,FileWriter(File p0)
java.io,IOException,IOException,IOException(String p0, Throwable p1)
java.io,IOException,IOException,IOException(Throwable p0)
java.io,InputStream,close,void close()
java.io,InputStream,read,int read()
java.io,InputStream,read,int read(byte[] p0)
java.io,InputStreamReader,InputStreamReader,InputStreamReader(InputStream p0)
java.io,OutputStream,close,void close()
java.io,OutputStream,flush,void flush()
java.io,OutputStream,write,void write(byte[] p0)
java.io,OutputStream,write,void write(byte[] p0, int p1, int p2)
java.io,OutputStreamWriter,close,void close()
java.io,OutputStreamWriter,flush,void flush()
java.io,PrintWriter,PrintWriter,PrintWriter(Writer p0)
java.io,PrintWriter,flush,void flush()
java.io,PrintWriter,println,void println()
java.io,PrintWriter,write,void write(String p0)
java.io,Reader,read,int read(char[] p0)
java.io,StringWriter,StringWriter,StringWriter()
java.io,StringWriter,StringWriter,StringWriter(int p0)
java.io,StringWriter,toString,String toString()
java.io,Writer,write,void write(String p0)
java.io,Writer,write,void write(char[] p0, int p1, int p2)
java.lang,AbstractStringBuilder,charAt,char charAt(int p0)
java.lang,AbstractStringBuilder,length,int length()
java.lang,AbstractStringBuilder,setLength,void setLength(int p0)
java.lang,Appendable,append,Appendable append(CharSequence p0, int p1, int p2)
java.lang,Appendable,append,Appendable append(char p0)
java.lang,Boolean,valueOf,Boolean valueOf(String p0)

