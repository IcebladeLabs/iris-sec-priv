A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.lang,CharSequence,charAt,char charAt(int p0)
java.lang,CharSequence,length,int length()
java.lang,Character,isWhitespace,boolean isWhitespace(char p0)
java.lang,Character,toChars,char[] toChars(int p0)
java.lang,Class,cast,SparkWebSocketCreator cast(Object p0)
java.lang,Class,forName,Class<?> forName(String p0)
java.lang,Class,getClassLoader,ClassLoader getClassLoader()
java.lang,Class,getMethod,Method getMethod(String p0, Class<?>[] p1)
java.lang,Class,getName,String getName()
java.lang,Class,getResource,URL getResource(String p0)
java.lang,Class,getResourceAsStream,InputStream getResourceAsStream(String p0)
java.lang,Class,getSimpleName,String getSimpleName()
java.lang,Class,getSuperclass,Class<?> getSuperclass()
java.lang,Class,isAnnotationPresent,boolean isAnnotationPresent(Class<? extends Annotation> p0)
java.lang,Class,isAssignableFrom,boolean isAssignableFrom(Class<?> p0)
java.lang,Class,newInstance,Object newInstance()
java.lang,ClassLoader,getResource,URL getResource(String p0)
java.lang,ClassLoader,getResourceAsStream,InputStream getResourceAsStream(String p0)
java.lang,ClassLoader,getSystemClassLoader,ClassLoader getSystemClassLoader()
java.lang,ClassLoader,loadClass,Class<?> loadClass(String p0)
java.lang,Double,Double,Double(double p0)
java.lang,Double,valueOf,Double valueOf(String p0)
java.lang,Enum,Enum,Enum(String p0, int p1)
java.lang,Enum,equals,boolean equals(Object p0)
java.lang,Enum,name,String name()
java.lang,Enum,toString,String toString()
java.lang,Error,Error,Error(Throwable p0)
java.lang,Exception,Exception,Exception()
java.lang,Exception,Exception,Exception(String p0)
java.lang,Float,Float,Float(float p0)

