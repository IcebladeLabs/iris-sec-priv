A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
javax.servlet.http,HttpSession,getCreationTime,long getCreationTime()
javax.servlet.http,HttpSession,getId,String getId()
javax.servlet.http,HttpSession,getLastAccessedTime,long getLastAccessedTime()
javax.servlet.http,HttpSession,getMaxInactiveInterval,int getMaxInactiveInterval()
javax.servlet.http,HttpSession,invalidate,void invalidate()
javax.servlet.http,HttpSession,isNew,boolean isNew()
javax.servlet.http,HttpSession,removeAttribute,void removeAttribute(String p0)
javax.servlet.http,HttpSession,setAttribute,void setAttribute(String p0, Object p1)
javax.servlet.http,HttpSession,setMaxInactiveInterval,void setMaxInactiveInterval(int p0)
org.apache.http,Header,getName,String getName()
org.apache.http,Header,getValue,String getValue()
org.apache.http,HttpMessage,addHeader,void addHeader(String p0, String p1)
org.apache.http,HttpMessage,getAllHeaders,Header[] getAllHeaders()
org.apache.http,HttpResponse,getEntity,HttpEntity getEntity()
org.apache.http,HttpResponse,getStatusLine,StatusLine getStatusLine()
org.apache.http,StatusLine,getStatusCode,int getStatusCode()
org.apache.http.client,HttpClient,execute,HttpResponse execute(HttpUriRequest p0)
org.apache.http.client.methods,HttpDelete,HttpDelete,HttpDelete(String p0)
org.apache.http.client.methods,HttpEntityEnclosingRequestBase,setEntity,void setEntity(HttpEntity p0)
org.apache.http.client.methods,HttpGet,HttpGet,HttpGet(String p0)
org.apache.http.client.methods,HttpHead,HttpHead,HttpHead(String p0)
org.apache.http.client.methods,HttpOptions,HttpOptions,HttpOptions(String p0)
org.apache.http.client.methods,HttpPatch,HttpPatch,HttpPatch(String p0)
org.apache.http.client.methods,HttpPost,HttpPost,HttpPost(String p0)
org.apache.http.client.methods,HttpPut,HttpPut,HttpPut(String p0)
org.apache.http.client.methods,HttpRequestBase,HttpRequestBase,HttpRequestBase()
org.apache.http.client.methods,HttpRequestBase,releaseConnection,void releaseConnection()
org.apache.http.client.methods,HttpRequestBase,setURI,void setURI(URI p0)
org.apache.http.client.methods,HttpTrace,HttpTrace,HttpTrace(String p0)
org.apache.http.config,RegistryBuilder,build,Registry<ConnectionSocketFactory> build()

