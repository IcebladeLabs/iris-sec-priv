A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.net,URL,getProtocol,String getProtocol()
java.net,URL,openConnection,URLConnection openConnection()
java.net,URL,toString,String toString()
java.net,URLClassLoader,URLClassLoader,URLClassLoader(URL[] p0, ClassLoader p1)
java.net,URLClassLoader,getURLs,URL[] getURLs()
java.net,URLConnection,addRequestProperty,void addRequestProperty(String p0, String p1)
java.net,URLConnection,connect,void connect()
java.net,URLConnection,getContentLength,int getContentLength()
java.net,URLConnection,getHeaderFields,Map<String,List<String>> getHeaderFields()
java.net,URLConnection,getInputStream,InputStream getInputStream()
java.net,URLConnection,getLastModified,long getLastModified()
java.net,URLConnection,setUseCaches,void setUseCaches(boolean p0)
java.net,URLDecoder,decode,String decode(String p0, String p1)
java.net,URLEncoder,encode,String encode(String p0, String p1)
java.nio,ByteBuffer,array,byte[] array()
java.nio,ByteBuffer,wrap,ByteBuffer wrap(byte[] p0)
java.nio.charset,Charset,isSupported,boolean isSupported(String p0)
java.nio.file,Path,toAbsolutePath,Path toAbsolutePath()
java.nio.file,Path,toString,String toString()
java.nio.file,Paths,get,Path get(String p0, String[] p1)
java.security,KeyStore,getDefaultType,String getDefaultType()
java.security,KeyStore,getInstance,KeyStore getInstance(String p0)
java.security,KeyStore,load,void load(InputStream p0, char[] p1)
java.util,ArrayDeque,ArrayDeque<String>,ArrayDeque<String>()
java.util,ArrayList,ArrayList<AbstractResourceHandler>,ArrayList<AbstractResourceHandler>()
java.util,ArrayList,ArrayList<Cookie>,ArrayList<Cookie>()
java.util,ArrayList,ArrayList<E>,ArrayList<E>()
java.util,ArrayList,ArrayList<Handler>,ArrayList<Handler>()
java.util,ArrayList,ArrayList<Integer>,ArrayList<Integer>()
java.util,ArrayList,ArrayList<Object>,ArrayList<Object>()

