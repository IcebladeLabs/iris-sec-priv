A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.lang,StringBuilder,insert,StringBuilder insert(int p0, String p1)
java.lang,StringBuilder,insert,StringBuilder insert(int p0, char p1)
java.lang,StringBuilder,toString,String toString()
java.lang,System,currentTimeMillis,long currentTimeMillis()
java.lang,System,getProperty,String getProperty(String p0)
java.lang,Thread,Thread,Thread(Runnable p0)
java.lang,Thread,currentThread,Thread currentThread()
java.lang,Thread,getContextClassLoader,ClassLoader getContextClassLoader()
java.lang,Thread,interrupt,void interrupt()
java.lang,Thread,setContextClassLoader,void setContextClassLoader(ClassLoader p0)
java.lang,Thread,start,void start()
java.lang,Throwable,getMessage,String getMessage()
java.lang,Throwable,printStackTrace,void printStackTrace()
java.lang,Throwable,toString,String toString()
java.lang,UnsupportedOperationException,UnsupportedOperationException,UnsupportedOperationException()
java.lang.reflect,Array,newInstance,Object newInstance(Class<?> p0, int p1)
java.lang.reflect,Method,invoke,Object invoke(Object p0, Object[] p1)
java.net,HttpURLConnection,disconnect,void disconnect()
java.net,HttpURLConnection,getResponseCode,int getResponseCode()
java.net,HttpURLConnection,setRequestMethod,void setRequestMethod(String p0)
java.net,MalformedURLException,MalformedURLException,MalformedURLException(String p0)
java.net,ServerSocket,ServerSocket,ServerSocket(int p0)
java.net,ServerSocket,getLocalPort,int getLocalPort()
java.net,URI,URI,URI(String p0)
java.net,URI,create,URI create(String p0)
java.net,URI,getScheme,String getScheme()
java.net,URI,getSchemeSpecificPart,String getSchemeSpecificPart()
java.net,URI,toURL,URL toURL()
java.net,URL,URL,URL(String p0)
java.net,URL,getFile,String getFile()

