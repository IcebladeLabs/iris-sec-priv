A path traversal vulnerability allows an attacker to access files on your web server to which they should not have access. They do this by tricking either the web server or the web application running on it into returning files that exist outside of the web root folder. Another attack pattern is that users can pass in malicious Zip file which may contain directories like "../". Typical sources of this vulnerability involves obtaining information from untrusted user input through web requests, getting entry directory from Zip files. Sinks will relate to file system manipulation, such as creating file, listing directories, and etc.

Some example source/sink/taint-propagator methods are:
[
  {
    "package": "java.util.zip",
    "class": "ZipEntry",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File file)",
    "sink_args": [
      "file"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String url)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String path)",
    "sink_args": [],
    "type": "taint-propagator"
  }
]

Among the following methods, assuming that the arguments passed to the given function is malicious, what are the functions that are potential source, sink, or taint-propagators to Path Traversal or Zip Slip attack (CWE-022)?

Package,Class,Method,Signature
java.lang,String,indexOf,int indexOf(int p0)
java.lang,String,isEmpty,boolean isEmpty()
java.lang,String,lastIndexOf,int lastIndexOf(String p0)
java.lang,String,lastIndexOf,int lastIndexOf(int p0)
java.lang,String,lastIndexOf,int lastIndexOf(int p0, int p1)
java.lang,String,length,int length()
java.lang,String,replace,String replace(CharSequence p0, CharSequence p1)
java.lang,String,replace,String replace(char p0, char p1)
java.lang,String,replaceAll,String replaceAll(String p0, String p1)
java.lang,String,split,String[] split(String p0)
java.lang,String,startsWith,boolean startsWith(String p0)
java.lang,String,substring,String substring(int p0)
java.lang,String,substring,String substring(int p0, int p1)
java.lang,String,toCharArray,char[] toCharArray()
java.lang,String,toLowerCase,String toLowerCase()
java.lang,String,trim,String trim()
java.lang,String,valueOf,String valueOf(int p0)
java.lang,StringBuffer,StringBuffer,StringBuffer(String p0)
java.lang,StringBuffer,append,StringBuffer append(String p0)
java.lang,StringBuffer,toString,String toString()
java.lang,StringBuilder,StringBuilder,StringBuilder()
java.lang,StringBuilder,StringBuilder,StringBuilder(String p0)
java.lang,StringBuilder,StringBuilder,StringBuilder(int p0)
java.lang,StringBuilder,append,StringBuilder append(CharSequence p0, int p1, int p2)
java.lang,StringBuilder,append,StringBuilder append(Object p0)
java.lang,StringBuilder,append,StringBuilder append(String p0)
java.lang,StringBuilder,append,StringBuilder append(char p0)
java.lang,StringBuilder,append,StringBuilder append(int p0)
java.lang,StringBuilder,delete,StringBuilder delete(int p0, int p1)
java.lang,StringBuilder,deleteCharAt,StringBuilder deleteCharAt(int p0)

